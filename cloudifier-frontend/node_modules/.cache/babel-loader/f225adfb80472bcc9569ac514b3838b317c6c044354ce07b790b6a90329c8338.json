{"ast":null,"code":"var _jsxFileName = \"E:\\\\MQL-2023\\\\S3\\\\Cloud\\\\Tp\\\\equipe\\\\cloudifier\\\\front\\\\cloudifier-front\\\\src\\\\pages\\\\MachinesPage.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport MachineCard from \"../components/Cards/Machine/MachineCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MachinesPage() {\n  _s();\n  const machines = [{\n    diskread: 0,\n    netout: 0,\n    disk: 0,\n    cpu: 0,\n    maxmem: 2147483648,\n    maxdisk: 34359738368,\n    vmid: 102,\n    cpus: 2,\n    mem: 0,\n    status: \"stopped\",\n    name: \"ubuntu-live-server-vm\",\n    uptime: 0,\n    netin: 0,\n    diskwrite: 0\n  }, {\n    diskread: 0,\n    netout: 0,\n    disk: 0,\n    cpu: 0,\n    maxmem: 2147483648,\n    maxdisk: 34359738368,\n    vmid: 102,\n    cpus: 2,\n    mem: 0,\n    status: \"running\",\n    name: \"ubuntu-live-server-vm2\",\n    uptime: 0,\n    netin: 0,\n    diskwrite: 0\n  }];\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const username = 'your_username'; // Replace with your Proxmox username\n        const password = 'your_password'; // Replace with your Proxmox password\n\n        // Get the Proxmox ticket\n        const ticketResponse = await fetch(\"https://192.168.1.3:8006/api2/json/access/ticket\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            username,\n            password\n          })\n        });\n        const {\n          data: {\n            ticket\n          }\n        } = await ticketResponse.json();\n\n        // Use the obtained ticket to fetch data from Proxmox API\n        const dataResponse = await fetch(\"https://192.168.1.3:8006/api2/json/nodes/server/qemu\", {\n          headers: {\n            Cookie: `PVEAuthCookie=${ticket}`\n          }\n        });\n        const data = await dataResponse.json();\n        console.log(data); // Use the fetched data as needed\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Your Machines\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Machines\",\n      children: machines.map(machine => /*#__PURE__*/_jsxDEV(MachineCard, {\n        machineData: machine\n      }, machine.vmid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(MachinesPage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MachinesPage;\nexport default MachinesPage;\nvar _c;\n$RefreshReg$(_c, \"MachinesPage\");","map":{"version":3,"names":["React","MachineCard","jsxDEV","_jsxDEV","MachinesPage","_s","machines","diskread","netout","disk","cpu","maxmem","maxdisk","vmid","cpus","mem","status","name","uptime","netin","diskwrite","useEffect","fetchData","username","password","ticketResponse","fetch","method","headers","body","JSON","stringify","data","ticket","json","dataResponse","Cookie","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","machine","machineData","_c","$RefreshReg$"],"sources":["E:/MQL-2023/S3/Cloud/Tp/equipe/cloudifier/front/cloudifier-front/src/pages/MachinesPage.jsx"],"sourcesContent":["import React from \"react\";\r\nimport MachineCard from \"../components/Cards/Machine/MachineCard\";\r\n\r\nfunction MachinesPage() {\r\n  const machines = [\r\n    {\r\n      diskread: 0,\r\n      netout: 0,\r\n      disk: 0,\r\n      cpu: 0,\r\n      maxmem: 2147483648,\r\n      maxdisk: 34359738368,\r\n      vmid: 102,\r\n      cpus: 2,\r\n      mem: 0,\r\n      status: \"stopped\",\r\n      name: \"ubuntu-live-server-vm\",\r\n      uptime: 0,\r\n      netin: 0,\r\n      diskwrite: 0,\r\n    },\r\n    {\r\n      diskread: 0,\r\n      netout: 0,\r\n      disk: 0,\r\n      cpu: 0,\r\n      maxmem: 2147483648,\r\n      maxdisk: 34359738368,\r\n      vmid: 102,\r\n      cpus: 2,\r\n      mem: 0,\r\n      status: \"running\",\r\n      name: \"ubuntu-live-server-vm2\",\r\n      uptime: 0,\r\n      netin: 0,\r\n      diskwrite: 0,\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const username = 'your_username'; // Replace with your Proxmox username\r\n        const password = 'your_password'; // Replace with your Proxmox password\r\n\r\n        // Get the Proxmox ticket\r\n        const ticketResponse = await fetch(\"https://192.168.1.3:8006/api2/json/access/ticket\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            username,\r\n            password,\r\n          }),\r\n        });\r\n\r\n        const { data: { ticket } } = await ticketResponse.json();\r\n\r\n        // Use the obtained ticket to fetch data from Proxmox API\r\n        const dataResponse = await fetch(\"https://192.168.1.3:8006/api2/json/nodes/server/qemu\", {\r\n          headers: {\r\n            Cookie: `PVEAuthCookie=${ticket}`,\r\n          },\r\n        });\r\n\r\n        const data = await dataResponse.json();\r\n        console.log(data); // Use the fetched data as needed\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <span>Your Machines</span>\r\n      <div className=\"Machines\">\r\n        {machines.map((machine) => (\r\n          <MachineCard\r\n            key={machine.vmid}\r\n            machineData={machine}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MachinesPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}